# ************************************NOTES************************************
# Google Style Guide: https://google.github.io/styleguide/pyguide.html
# THG Style Guide: https://docs.python-guide.org/writing/style/
# PEP8 introduction: https://realpython.com/python-pep8/
# About auto-formatters: https://wemake-python-stylegui.de/en/latest/pages/usage/integrations/auto-formatters.html
# About Legacy Projects: https://wemake-python-stylegui.de/en/latest/pages/usage/integrations/legacy.html
# About CI: https://wemake-python-stylegui.de/en/latest/pages/usage/integrations/ci.html
# About pylint: https://wemake-python-stylegui.de/en/latest/pages/usage/integrations/pylint.html
# About extra tools: https://wemake-python-stylegui.de/en/latest/pages/usage/integrations/extras.html

# Tox:
# https://tox.readthedocs.io/en/latest/index.html
# https://tox.readthedocs.io/en/latest/install.html
# https://tox.readthedocs.io/en/latest/config.html
# https://tox.readthedocs.io/en/latest/example/basic.html
# https://tox.readthedocs.io/en/latest/example/general.html
# https://tox.readthedocs.io/en/latest/example/package.html
# https://tox.readthedocs.io/en/latest/example/pytest.html
# https://tox.readthedocs.io/en/latest/example/documentation.html
# https://tox.readthedocs.io/en/latest/plugins.html

# WeMakePythonStyleGuide:
# https://wemake-python-stylegui.de/en/latest/index.html
# https://wemake-python-stylegui.de/en/latest/pages/usage/configuration.html
# https://wemake-python-stylegui.de/en/latest/pages/usage/violations/index.html
# http://pycodestyle.pycqa.org/en/latest/intro.html
# http://flake8.pycqa.org/en/latest/user/configuration.html
# http://flake8.pycqa.org/en/latest/user/options.html
# http://flake8.pycqa.org/en/latest/user/error-codes.html
# http://flake8.pycqa.org/en/latest/user/violations.html
# https://wemake-python-stylegui.de/en/latest/pages/usage/formatter.html
# https://wemake-python-stylegui.de/en/latest/pages/usage/integrations/plugins.html
# http://flake8.pycqa.org/en/latest/user/options.html?highlight=per-file-ignores#cmdoption-flake8-per-file-ignores

# Coverage:
# https://coverage.readthedocs.io/en/latest/cmd.html
# https://coverage.readthedocs.io/en/latest/config.html

# Documentation:
# https://www.python.org/dev/peps/pep-0257/
# http://www.pydocstyle.org/en/2.1.1/index.html
# https://www.sphinx-doc.org/en/master/usage/quickstart.html
# RST Reference:
# https://www.sphinx-doc.org/en/master/usage/restructuredtext/index.html
# Sphinx Configuration:
# https://www.sphinx-doc.org/en/master/usage/configuration.html
# Sphinx Internationalization:
# https://www.sphinx-doc.org/en/master/usage/advanced/intl.html
# Sphinx Directives
# https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html
# Sphinx Objects
# https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html
# Other:
# https://opensource.com/article/19/11/document-python-sphinx
# https://www.writethedocs.org/guide/

# ******************************************************************************


# *************************************TOX*************************************
[tox]

toxworkdir = {toxinidir}/.tox

temp_dir = {toxworkdir}/.tmp

# Can be used for a local PyPI Registry
indexserver =
  default = https://pypi.org/simple

# This may be used when some interpreters are missing:
# skip_missing_interpreters = true

# [With Dockerfile] Have access to global site-packages.
sitepackages = true

# [With Dockerfile] Everything is already installed.
skip_install = true

# Use "setup.py develop" instead of sdist:
# usedevelop = true

envlist =
  build,
  up,
  down,
  init-db,
  make-migration,
  migrate,
  style-guide,
  unit-tests,
  unit-tests-with-coverage,
  coverage-report,
  docs,
  docs-openapi,


[testenv]

# [With Dockerfile] Allow running commands like docker-compose, etc.
allowlist_externals = *

platform = linux|linux2|darwin

setenv =
  PWD={toxinidir}
  DOCS_CACHE=.tox/sphinx_doctree
  DOCS_SOURCE=./docs/source
  DOCS_BUILD=./docs/build
  SQLALCHEMY_DATABASE_URI={env:SQLALCHEMY_DATABASE_URI:postgresql://postgres:postgres@postgres:5432/test}
  SERVER_NAME={env:SERVER_NAME:127.0.0.1}
  FLASK_APP=myapp
  SECRET_KEY={env:SECRET_KEY:123}
  SECRET_SALT={env:SECRET_SALT:123}

# Do not prevent symbolic links
alwayscopy = false

# [With Dockerfile] The environment is already created.
recreate = false
#*******************************************************************************


# ************************************Build************************************
# Command: tox -e build
# Info: docker build
[testenv:build]

commands =
  sh -c '\
    docker image build \
      --rm \
      --tag flask-classful-api \
      --file docker/Dockerfile \
      --build-arg UID="$(id -u)" \
      --build-arg GID="$(id -g)" \
      . \
  '
#*******************************************************************************


# **************************************Up**************************************
# Command: tox -e up
# Info: docker-compose up
[testenv:up]

commands =
  docker-compose up --detach
#*******************************************************************************


# *************************************Down*************************************
# Command: tox -e down
# Info: docker-compose down
[testenv:down]

commands =
  docker-compose down
#*******************************************************************************


# ***********************************Init-DB***********************************
[testenv:init-db]

description = invoke flask db init

commands =
  sh -c '\
    docker container run \
      --rm \
      --network flask-app \
      --env SQLALCHEMY_DATABASE_URI={env:SQLALCHEMY_DATABASE_URI} \
      --env SERVER_NAME={env:SERVER_NAME} \
      --env SECRET_KEY={env:SECRET_KEY} \
      --env SECRET_SALT={env:SECRET_SALT} \
      --volume {env:PWD}:/opt \
      flask-classful-api \
      flask db init \
    || true \
  '
#*******************************************************************************


# ********************************Make Migration********************************
[testenv:make-migration]

description = invoke flask db migrate

commands =
  sh -c '\
    docker container run \
      --rm \
      --network flask-app \
      --env SQLALCHEMY_DATABASE_URI={env:SQLALCHEMY_DATABASE_URI} \
      --env SERVER_NAME={env:SERVER_NAME} \
      --env SECRET_KEY={env:SECRET_KEY} \
      --env SECRET_SALT={env:SECRET_SALT} \
      --volume {env:PWD}:/opt \
      flask-classful-api \
      flask db migrate {posargs} \
  '
#*******************************************************************************


# ***********************************Migrate***********************************
[testenv:migrate]

description = invoke flask db upgrade

commands =
  sh -c '\
    docker container run \
      --rm \
      --network flask-app \
      --env SQLALCHEMY_DATABASE_URI={env:SQLALCHEMY_DATABASE_URI} \
      --env SERVER_NAME={env:SERVER_NAME} \
      --env SECRET_KEY={env:SECRET_KEY} \
      --env SECRET_SALT={env:SECRET_SALT} \
      --volume {env:PWD}:/opt \
      flask-classful-api \
      flask db upgrade {posargs} \
  '
#*******************************************************************************


# *********************************Style Guide*********************************
# Command: tox -e style-guide
# Info: wemake-python-styleguide (flake8 + plugins)
[testenv:style-guide]

commands =
  docker container run --rm -it -v {env:PWD}:/opt flask-classful-api flake8 src/myapp

[flake8]
# Wemake Python Style Guide Configuration

jobs = 4

min-name-length = 1
# We don't control ones who use our code
i-control-code = False
nested-classes-whitelist =
  Meta
# Max of noqa in a module
max-noqa-comments = 10
max-returns = 5
max-awaits = 5
max-local-variables = 10
# Max of expressions in a function
max-expressions = 10
# Max args in a function
max-arguments = 10
# Max classes and functions in a single module
max-module-members = 20
max-methods = 10
# Max line complexity measured in AST nodes
max-line-complexity = 25
# Max Jones Score for a module: the median of all lines complexity sum
max-jones-score = 15
# Max amount of cognitive complexity per function
max-cognitive-score = 25
# Max amount of cognitive complexity per module
max-cognitive-average = 15
max-imports = 25
max-imported-names = 50
max-import-from-members = 25
# Max of expression usages in a module
max-module-expressions = 15
# Max of expression usages in a function
max-function-expressions = 15
max-base-classes = 5
max-decorators = 6
# Max of repeated string constants in your modules
max-string-usages = 15
max-try-body-length = 3
max-asserts = 5
# Max number of access level in an expression
max-access-level = 5
# maximum number of public instance attributes
max-attributes = 12

max-line-length = 100
max-doc-length = 100

# https://pypi.org/project/flake8-quotes/
inline-quotes = '

# https://wemake-python-stylegui.de/en/latest/pages/usage/formatter.html
# format = '%(path)s:%(row)d:%(col)d: %(code)s %(text)s'
format = wemake
show-source = True
# Print total number of errors
count = True
# statistics = True
# benchmark = True

exclude =
  .tox,
  tests,
  migrations,
  dist,
  build,
  virtualenv,
  venv,
  ve,

# https://wemake-python-stylegui.de/en/latest/pages/usage/violations/index.html
# http://pycodestyle.pycqa.org/en/latest/intro.html
ignore =
  # Import at the wrong position
  # [buggy with trailing commas and "as <alias>" imports]
  # [too much hassle]
  # [sometimes flask imports cannot be placed alphabetically]
  I001,
  # Found `f` string [opinionated]
  WPS305,
  # Found explicit string concat [opinionated]
  WPS336,
  # Found using `@staticmethod` [opinionated]
  WPS602,
  # Found wrong variable name ("data", "handler", "params") [opinionated]
  WPS110,
  # Found upper-case constant in a class (flask config requires uppercase consts) [opinionated]
  WPS115,
  # Found class without a base class (goes against PEP8) [opinionated]
  WPS306,
  # Found incorrect unpacking target [opinionated]
  WPS414,
  # Found line break before binary operator [goes against PEP8] [opinionated]
  W503,
  # Found multiline conditions [opinionated]
  WPS337,
  # Found mutable module constant [opinionated]
  WPS407,
  # Found negated condition [opinionated]
  WPS504,
  # Found nested function [opinionated]
  WPS430,
  # Found wrong metadata variable (__all__, __version__) [opinionated]
  WPS410,
  # Found all unused variables definition: _ [opinionated]
  WPS122,
  # Found implicit `.get()` dict usage [wrong]
  WPS529,

# http://flake8.pycqa.org/en/latest/user/options.html?highlight=per-file-ignores#cmdoption-flake8-per-file-ignores
per-file-ignores =
  app.py:
    # Flask requires a lot of imports
    WPS201,
    # Flask requires nested imports
    WPS433,
    # Flask requires 'unused imports' (initialization imports)
    F401,

  config.py:
    WPS432,
    WPS345,
    E800,

  auth.py:
    # Open API YAML notation doesn't follow Python guidelines
    DAR,
    RST,
    WPS411,
    WPS601,

  guys.py:
    # Open API YAML notation doesn't follow Python guidelines
    DAR,
    RST,
    WPS411,
    WPS601,

  stats.py:
    # Open API YAML notation doesn't follow Python guidelines
    DAR,
    RST,
    WPS411,
    WPS601,

  __init__.py:
    # F401 imported but unused [makes sense for packages]
    F401,
    # * imports are valid for __init__.py scripts
    F403,
    WPS347,
    WPS440,
    # __init__.py scripts may require a lot of imports
    WPS235,
    # Found local folder import
    WPS300,


[darglint]
docstring_style = sphinx


[isort]
# https://isort.readthedocs.io/en/latest/#configuring-isort
indent = '    '
multi_line_output = 3
known_third_party = marshmallow
known_standard_library = typing
known_first_party = myapp

#*******************************************************************************


# **********************************Unit Tests**********************************
# Command: tox -e unit-tests
[testenv:unit-tests]

commands =
  sh -c '\
    docker container run \
      --rm \
      --network flask-app \
      --env SQLALCHEMY_DATABASE_URI={env:SQLALCHEMY_DATABASE_URI} \
      --env SERVER_NAME={env:SERVER_NAME} \
      --env SECRET_KEY={env:SECRET_KEY} \
      --env SECRET_SALT={env:SECRET_SALT} \
      --volume {env:PWD}:/opt \
      flask-classful-api \
      pytest -s -v --pyargs myapp.tests \
  '

# ******************************************************************************


# ***********************************Coverage***********************************
[testenv:unit-tests-with-coverage]

commands =
  sh -c '\
    docker container run \
      --rm \
      --network flask-app \
      --env SQLALCHEMY_DATABASE_URI={env:SQLALCHEMY_DATABASE_URI} \
      --env SERVER_NAME={env:SERVER_NAME} \
      --env SECRET_KEY={env:SECRET_KEY} \
      --env SECRET_SALT={env:SECRET_SALT} \
      --volume {env:PWD}:/opt \
      flask-classful-api \
      sh -c " \
        coverage run -m pytest -s -v --pyargs myapp.tests \
        && coverage combine \
        && coverage report -m \
      " \
  '


[testenv:coverage-report]

commands =
  sh -c ' \
    docker container run \
      --rm \
      --network flask-app \
      --env SQLALCHEMY_DATABASE_URI={env:SQLALCHEMY_DATABASE_URI} \
      --env SERVER_NAME={env:SERVER_NAME} \
      --env SECRET_KEY={env:SECRET_KEY} \
      --env SECRET_SALT={env:SECRET_SALT} \
      --volume {env:PWD}:/opt \
      flask-classful-api \
      sh -c " \
        coverage report -m \
        && coverage html -d ./coverage_html \
      " \
  '


[coverage:run]

source =
  src/myapp
  **/site-packages/myapp
parallel = true
data_file = .coverage


[coverage:paths]

source =
  src/myapp
  **/site-packages/myapp


[coverage:report]

show_missing = true
skip_covered = true
exclude_lines =
  \#\s*pragma: no cover
  ^\s*raise AssertionError\b
  ^\s*raise NotImplementedError\b
  ^\s*return NotImplemented\b
  ^\s*raise$
  ^if __name__ == ['"]__main__['"]:$

# ******************************************************************************


# ********************************Documentation********************************
# Start: sphinx-quickstart --no-makefile --no-batchfile --sep --project 'MyAPP -- Flask REST API Example' --author 'Max Tarasishin' --release 2020.06.1 --language en docs
# Command: tox -c setup_tox.ini -e documentation html
[testenv:docs]

description = invoke sphinx-build to build the HTML docs

commands =
  sh -c ' \
    docker container run \
      --rm \
      --network flask-app \
      --env SQLALCHEMY_DATABASE_URI={env:SQLALCHEMY_DATABASE_URI} \
      --env SERVER_NAME={env:SERVER_NAME} \
      --env SECRET_KEY={env:SECRET_KEY} \
      --env SECRET_SALT={env:SECRET_SALT} \
      --volume {env:PWD}:/opt \
      flask-classful-api \
      sh -c " \
        sphinx-build -d {env:DOCS_CACHE} {env:DOCS_SOURCE} {env:DOCS_BUILD} --color -W -b {posargs} \
      " \
  '


[testenv:docs-openapi]

description = generate OpenAPI JSON specification

commands =
  sh -c ' \
    docker container run \
      --rm \
      --network flask-app \
      --env SQLALCHEMY_DATABASE_URI={env:SQLALCHEMY_DATABASE_URI} \
      --env SERVER_NAME={env:SERVER_NAME} \
      --env SECRET_KEY={env:SECRET_KEY} \
      --env SECRET_SALT={env:SECRET_SALT} \
      --volume {env:PWD}:/opt \
      flask-classful-api \
      flask open-api-dump --filename ./openapi.json \
  '

# ******************************************************************************
